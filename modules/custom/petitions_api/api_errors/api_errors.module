<?php

/**
 * @file
 * Provides custom error handling for the services module.
 */

/**
 * Wrapper for services_error(), using WH API Standards parameters.
 *
 * @param int $status_code
 *   The HTTP status code to be returned to the client, e.g. 200, 400, 500.
 * @param string $developer_message
 *   A verbose, plain language description of the problem. Provide developers
 *   suggestions about how to solve their problems here.
 * @param string $user_message
 *   (optional) A message that can be passed along to end-users, if needed.
 *   Defaults to NULL.
 * @param string $more_info
 *   (optional) A URL to visit for more information about the error. Defaults
 *   to NULL.
 * @param int $error_code
 *   (optional) An internally determined error number. Defaults to NULL.
 *
 * @return array
 *   In the case of a 5xx error, an reponse array is returned directly.
 *
 * @see https://github.com/WhiteHouse/api-standards#error-handling
 */
function api_errors_throw_error($status_code, $developer_message, $user_message = NULL, $more_info = NULL, $error_code = NULL) {

  // Load services.runtime.inc from the Services module.
  module_load_include('inc', 'services', 'services.runtime');

  // Store our custom error response variables in an arbitrary data object,
  // to be passed with other errors.
  $data = array(
    'userMessage' => $user_message,
    'errorCode' => $error_code,
    'moreInfo' => $more_info,
    'developerMessage' => $developer_message,
  );

  // Throwing 5xx errors will cause varnish to override our response, so we
  // can't return a 500 error in the HTTP header, only in the response body.
  if (substr($status_code, 0, 1) == 5) {
    $response_params = array(
      'developer_message' => "{$status_code}: {$developer_message}",
      'status_code' => $status_code,
      'error_code' => $error_code,
      'more_info' => $more_info,
      'user_message' => $user_message,
    );
    $response = api_services_responses_format($response_params);

    return $response;
  }

  // Throw the error. This will be formatted via
  // api_errors_rest_server_execute_errors_alter().
  services_error($developer_message, $status_code, $data);
}


/**
 * Implements hook_rest_server_execute_errors_alter().
 *
 * @param array $error
 *   An array with the following properties:
 *     - code: error code
 *     - header_message: message that will be returned in Status header
 *     - body_data: data returned in the body of the response
 *   You can alter 'header_message' and 'body_data' in your hook
 *   implementations.
 * @param array $controller
 *   The executed controller.
 * @param array $arguments
 *   The arguments passed to the controller.
 */
function api_errors_rest_server_execute_errors_alter(&$error, $controller, $arguments) {

  $response_params = array(
    // Round status down to the nearest hundred (e.g. 200, 400, 500).
    // Fancier stuff can go in errorCode.
    'status_code' => floor($error['code'] / 100) * 100,
    // errorCode here can be 404 or 4444444 (where 4444444 might correspond
    // with a drupal.org issue like drupal.org/node/4444444), or some number
    // corresponding with a GitHub issue in the issue queue.
    'error_code' => is_array($error['body_data']) && array_key_exists('errorCode', $error['body_data']) && !empty($error['body_data']['errorCode']) ? $error['body_data']['errorCode'] : (int) $error['code'],
    'developer_message' => $error['header_message'],
    'user_message' => is_array($error['body_data']) && array_key_exists('userMessage', $error['body_data']) ? $error['body_data']['userMessage'] : NULL,
    // Provide links to relevant issues on drupal.org, GitHub, etc. and any
    // other relevant documentation or helpful links.
    'more_info' => is_array($error['body_data']) && array_key_exists('moreInfo', $error['body_data']) ? $error['body_data']['moreInfo'] : NULL,
  );

  $error['body_data'] = api_services_responses_format($response_params);
}
