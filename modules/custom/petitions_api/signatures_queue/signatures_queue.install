<?php

/**
 * @file
 * Install, update and uninstall functions for the Signatures Queue module.
 */

require_once "signatures_queue.module";

/**
 * Implements hook_install().
 */
function signatures_queue_install() {
  $t = get_t();

  // Set database to signatures_processing so that we create the tables there.
  signatures_queue_set_db('signatures_processing');

  $schema = _signatures_queue_schema_tables();
  foreach ($schema as $name => $table) {
    db_create_table($name, $table);
  }

  // Set back to default and get the previously active db.
  $previous = db_set_active();
  if ($previous != 'signatures_processing') {
    drupal_set_message($t('IMPORTANT! Signature processing tables created in default database. This is not recommended for production installations. See INSTALL.md for more information.'), 'warning');
  }

  // Set database to signatures_archive so that we create tables there.
  signatures_queue_set_db('signatures_archive');

  $schema = _signatures_queue_archive_schema_tables();
  foreach ($schema as $name => $table) {
    db_create_table($name, $table);
  }

  // Set back to default and get the previously active db.
  $previous = db_set_active();
  if ($previous != 'signatures_archive') {
    drupal_set_message($t('IMPORTANT! Signature archive tables created in default database. This is not recommended for production installations. See INSTALL.md for more information.'), 'warning');
  }

  // Warn users about two week limit on archiving.
  drupal_set_message($t('IMPORTANT! The archiving workflow assumes you are processing signatures regularly. The default assumption is that all queues will be cleared within any given two week period.  If you intend to NOT process signatures regularly, make the necessary adjustments to $queues_last_emptied in includes/archive_signatures.inc.'), 'warning');
}

/**
 * Define schema for validation tables.
 */
function _signatures_queue_get_validations_schema() {
  // Schema for validations tables.
  $schema = array(
    'description' => 'Validated signatures.',
    'fields' => array(
      'vid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Signature ID.',
      ),
      'secret_validation_key' => array(
        'description' => 'The unique, hashed secret validation key.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'timestamp_validated' => array(
        'description' => 'Time of the validation.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'timestamp_validation_close' => array(
        'description' => 'Time petition is no longer valid to sign.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'client_ip' => array(
        'description' => 'Client IP address',
        'type' => 'varchar',
        'length' => 40,
        'not null' => FALSE,
        'default' => '',
      ),
      'petition_id' => array(
        'description' => 'Petition ID.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'timestamp_processed' => array(
        'description' => 'Time signature validation was processed.',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'validation_key' => array('secret_validation_key'),
      'petition_signed' => array('petition_id'),
      'timestamp_validation_close' => array('timestamp_validation_close'),
    ),
    'unique keys' => array(
      'secret_validation_key' => array('secret_validation_key'),
    ),
    'primary key' => array('vid'),
  );
  return $schema;
}

/**
 * Define schema for signature tables.
 */
function _signatures_queue_get_signatures_schema() {
  // Schema for signatures table.
  $schema = array(
    'description' => 'Validated signatures.',
    'fields' => array(
      'sid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Signature ID.',
      ),
      'secret_validation_key' => array(
        'description' => 'The unique, hashed secret validation key.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'signature_source_api_key' => array(
        'description' => 'The source api key.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'timestamp_petition_close' => array(
        'description' => 'Time petition closes/expires.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'timestamp_validation_close' => array(
        'description' => 'Time petition is no longer valid to sign.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'petition_id' => array(
        'description' => 'Petition ID.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'first_name' => array(
        'description' => 'First Name.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
        'default' => '',
      ),
      'last_name' => array(
        'description' => 'Last Name.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
        'default' => '',
      ),
      'zip' => array(
        'description' => 'Zip code.',
        'type' => 'varchar',
        'length' => 16,
        'not null' => FALSE,
        'default' => '',
      ),
      'email' => array(
        'description' => 'Email address.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'default' => '',
      ),
      'signup' => array(
        'description' => 'Email list Signup.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'timestamp_validation_email_sent' => array(
        'description' => 'Time validation email was sent.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'timestamp_submitted' => array(
        'description' => 'Time signature was submitted.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'timestamp_processed' => array(
        'description' => 'Time signature validation was processed.',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'signatures_pending_validation_key' => array('secret_validation_key'),
      'signatures_pending_petition_id' => array('petition_id'),
      'timestamp_validation_close' => array('timestamp_validation_close'),
    ),
    'unique keys' => array(
      'secret_validation_key' => array('secret_validation_key'),
    ),
    'primary key' => array('sid'),
  );
  return $schema;
}


/**
 * Signature processing schema for creation on any database.
 *
 * Typically tables are created using hook_schema() but we allow these tables to
 * be added to a secondary database.
 *
 * @see signatures_queue_install()
 */
function _signatures_queue_schema_tables() {
  $schema = array();

  // Validation schema tables.
  $schema['validations'] = _signatures_queue_get_validations_schema();
  $schema['validations']['description'] = 'Signature validations, received when a user validates his/her signature by email.';

  $schema['validations_processed'] = _signatures_queue_get_validations_schema();
  $schema['validations_processed']['description'] = 'Processed validations are validation records matched to corresponding pending signatures and counted.';

  // Signature schema tables.
  $schema['signatures_pending_validation'] = _signatures_queue_get_signatures_schema();
  $schema['signatures_pending_validation']['description'] = 'Pending signatures awaiting validation.';

  $schema['signatures_processed'] = _signatures_queue_get_signatures_schema();
  $schema['signatures_processed']['description'] = 'Processed signatures are pending signature records matched to corresponding validation records and counted.';

  // Workflow log schema.
  $schema['signatures_queue_log'] = array(
    'description' => 'The event log for signature queue processing.',
    'fields' => array(
      'lid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique {signatures_queue_log} row ID.',
      ),
      'job_id' => array(
        'description' => 'A unique identifier for a job.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 0,
      ),
      'workflow' => array(
        'description' => 'The workflow the job is processing.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'server_name' => array(
        'description' => 'The server name.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => SIGNATURES_QUEUE_SERVER_NAME_DEFAULT,
      ),
      'worker_name' => array(
        'description' => 'The worker name.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => SIGNATURES_QUEUE_WORKER_NAME_DEFAULT,
      ),
      'timestamp' => array(
        'description' => 'The timestamp when the status changed.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'The status of the job.',
        'type' => 'varchar',
        'length' => 16,
        'not null' => TRUE,
        'default' => 'started',
      ),
    ),
    'primary key' => array('lid'),
    'indexes' => array(
      'job_id' => array('job_id'),
    ),
    'mysql_engine' => 'InnoDB',
  );

  return $schema;
}

/**
 * Signature archive schema for creation on any database.
 *
 * Typically tables are created using hook_schema() but we allow these tables to
 * be added to a secondary (or tertiary) database.
 *
 * @see _signatures_queue_schema_tables()
 * @see signatures_queue_install()
 */
function _signatures_queue_archive_schema_tables() {
  $schema = array();

  // Validation schema tables.
  $schema['validations_orphaned_archive'] = _signatures_queue_get_validations_schema();
  $schema['validations_orphaned_archive']['description'] = 'Legitimate validations have corresponding pending signatures. Orphaned validations are records with no corresponding signature.';

  $schema['validations_processed_archive'] = _signatures_queue_get_validations_schema();
  $schema['validations_processed_archive']['description'] = 'Processed and archived validations.';

  // Signature schema tables.
  $schema['signatures_not_validated_archive'] = _signatures_queue_get_signatures_schema();
  $schema['signatures_not_validated_archive']['description'] = 'Pending signatures that are not validated in time are archived here.';

  $schema['signatures_processed_archive'] = _signatures_queue_get_signatures_schema();
  $schema['signatures_processed_archive']['description'] = 'Archived valid signatures.';

  return $schema;
}

/**
 * Implements hook_schema().
 *
 * @see _signatures_queue_schema_tables()
 */
function signatures_queue_schema() {
  $schema['signature_validations'] = array(
    'description' => 'Signature Validations.',
    'fields' => array(
      'vid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Validation ID.',
      ),
      'secret_validation_key' => array(
        'description' => 'The unique, hashed secret validation key.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'signature_id' => array(
        'description' => 'The Signature ID.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => 0,
      ),
      'signature_source_api_key' => array(
        'description' => 'The source api key.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'email' => array(
        'description' => 'Email address.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'default' => '',
      ),
      'petition_id' => array(
        'description' => 'Petition ID.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'timestamp_processed' => array(
        'description' => 'Time signature validation was processed.',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('vid'),
    'indexes' => array(
      'source_key' => array('signature_source_api_key'),
    ),
    'mysql_engine' => 'InnoDB',
  );
  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function signatures_queue_uninstall() {
  // Set database so that we drop the tables there.
  signatures_queue_set_db();

  // Remove the tables defined in _signatures_queue_schema_tables().
  $schema = _signatures_queue_schema_tables();
  foreach (array_keys($schema) as $name) {
    db_drop_table($name);
  }

  // Set database to the archive db so that we drop the tables there.
  signatures_queue_set_db('signatures_archive');

  // Remove the tables defined in _signatures_queue_archive_schema_tables().
  $schema = _signatures_queue_archive_schema_tables();
  foreach (array_keys($schema) as $name) {
    db_drop_table($name);
  }

  db_set_active();

  // Delete all Signatures Queue persistent variables.
  db_delete('variable')
    ->condition('name', db_like('signatures_queue') . '%', 'LIKE')
    ->execute();
  cache_clear_all('variables', 'cache_bootstrap');
}
