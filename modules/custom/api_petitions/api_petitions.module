<?php

/**
 * @file
 * api_petitions.module
 *
 * Provides petitions and signatures for Services according to Whitehouse API
 * Standards.
 */

/**
 * Implements hook_services_resources().
 */
function api_petitions_services_resources() {
  $resources = array();

  $resources['petitions'] = array(
    'operations' => array(
      'retrieve' => array(
        'callback' => '_api_petitions_resource_retrieve',
        'args' => array(
          array(
            'name' => 'petition_id',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'string',
            'description' => 'The petition id of the petition to get.',
          ),
          array(
            'name' => 'mock',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'When set to 1, this will cause the service to return a mock response.',
            'default value' => 0,
            'source' => array('param' => 'mock'),
          ),
        ),
        'access callback' => 'services_access_menu',
        'documentation callback' => '_api_petitions_retrieve_doc',
        'documentation versions' => array(1000),
      ),
      'index' => array(
        'callback' => '_api_petitions_resource_index',
        'args' => array(
          array(
            'name' => 'created_before',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display items created before specified time. Accepts Unix timestamp.',
            'source' => array('param' => 'createdBefore'),
          ),
          array(
            'name' => 'created_after',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display items created after specified time. Accepts Unix timestamp.',
            'source' => array('param' => 'createdAfter'),
          ),
          array(
            'name' => 'created_at',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results based on exact creation time. Accepts Unix timestamp.',
            'source' => array('param' => 'createdAt'),
          ),
          array(
            'name' => 'limit',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'The maximum number of results that may be returned. E.g., to return results 10-20, an offset of 10 and limit of 10 would be passed.',
            'default value' => 10,
            'source' => array('param' => 'limit'),
          ),
          array(
            'name' => 'offset',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Offset the returned results by this number. E.g., to return results 10-20, an offset of 10 and limit of 10 would be passed.',
            'default value' => 0,
            'source' => array('param' => 'offset'),
          ),
          array(
            'name' => 'title',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'Filters results by keyword or phrase in the Title.',
            'default value' => NULL,
            'source' => array('param' => 'title'),
          ),
          array(
            'name' => 'body',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'Filters results by keyword or phrase in the Body.',
            'default value' => NULL,
            'source' => array('param' => 'body'),
          ),
          array(
            'name' => 'issue_id',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results by Issue ID.',
            'default value' => NULL,
            'source' => array('param' => 'issueID'),
          ),
          array(
            'name' => 'issue',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'Filters results by Issue.',
            'default value' => NULL,
            'source' => array('param' => 'issue'),
          ),
          array(
            'name' => 'signature_threshold_ceiling',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results by maximum Signature Threshold.',
            'default value' => NULL,
            'source' => array('param' => 'signatureThresholdCeiling'),
          ),
          array(
            'name' => 'signature_threshold',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results by exact Signature Threshold.',
            'default value' => NULL,
            'source' => array('param' => 'signatureThreshold'),
          ),
          array(
            'name' => 'signature_threshold_floor',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results by minimum Signature Threshold.',
            'default value' => NULL,
            'source' => array('param' => 'signatureThresholdFloor'),
          ),
          array(
            'name' => 'signature_count_ceiling',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results by maximum Signature Count.',
            'default value' => NULL,
            'source' => array('param' => 'signatureCountCeiling'),
          ),
          array(
            'name' => 'signature_count',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results by exact Signature Count.',
            'default value' => NULL,
            'source' => array('param' => 'signatureCount'),
          ),
          array(
            'name' => 'signature_count_floor',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results by minimum Signature Count.',
            'default value' => 150,
            'source' => array('param' => 'signatureCountFloor'),
          ),
          array(
            'name' => 'signatures_needed_ceiling',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results by maximum Signatures Needed.',
            'default value' => NULL,
            'source' => array('param' => 'signaturesNeededCeiling'),
          ),
          array(
            'name' => 'signatures_needed',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results by exact Signatures Needed.',
            'default value' => NULL,
            'source' => array('param' => 'signaturesNeeded'),
          ),
          array(
            'name' => 'signatures_needed_floor',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results by minimum Signatures Needed.',
            'default value' => NULL,
            'source' => array('param' => 'signaturesNeededFloor'),
          ),
          array(
            'name' => 'url',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'Filters results by Petition URL.',
            'default value' => NULL,
            'source' => array('param' => 'url'),
          ),
          array(
            'name' => 'deadline_before',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display items with a Deadline before a specified time. Accepts Unix timestamp.',
            'default value' => NULL,
            'source' => array('param' => 'deadlineBefore'),
          ),
          array(
            'name' => 'deadline',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display items with a Deadline at an exact specified time. Accepts Unix timestamp.',
            'default value' => NULL,
            'source' => array('param' => 'deadline'),
          ),
          array(
            'name' => 'deadline_after',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display items with a Deadline after a specified time. Accepts Unix timestamp.',
            'default value' => NULL,
            'source' => array('param' => 'deadlineAfter'),
          ),
          array(
            'name' => 'status',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'Filters results by Status.',
            'default value' => NULL,
            'source' => array('param' => 'status'),
          ),
          array(
            'name' => 'response_id',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results by Response ID .',
            'default value' => NULL,
            'source' => array('param' => 'responseID'),
          ),
          array(
            'name' => 'response_association_time_before',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display items with a Response Assocation before a specified time. Accepts Unix timestamp.',
            'default value' => NULL,
            'source' => array('param' => 'responseAssociationTimeBefore'),
          ),
          array(
            'name' => 'response_association_time',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display items with a Response Assocation at an exact specified time. Accepts Unix timestamp.',
            'default value' => NULL,
            'source' => array('param' => 'responseAssociationTime'),
          ),
          array(
            'name' => 'response_association_time_after',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display items with a Response Association after a specified time. Accepts Unix timestamp.',
            'default value' => NULL,
            'source' => array('param' => 'responseAssociationTimeAfter'),
          ),
          array(
            'name' => 'mock',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'When set to 1, this will cause the service to return a mock response.',
            'default value' => 0,
            'source' => array('param' => 'mock'),
          ),
        ),
        'access callback' => 'services_access_menu',
        'documentation callback' => '_api_petitions_index_doc',
        'documentation versions' => array(1000),
      ),
    ),
    'relationships' => array(
      'signatures' => array(
        'help' => t('This method returns signatures associated with a petition.'),
        'callback' => '_api_petitions_load_signatures',
        'args' => array(
          array(
            'name' => 'petition_id',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'string',
            'description' => 'The petition id of the petition whose signatures we are getting.',
          ),
          array(
            'name' => 'city',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display signatures from a specific city.',
            'source' => array('param' => 'city'),
          ),
          array(
            'name' => 'state',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display signatures from a specific state.',
            'source' => array('param' => 'state'),
          ),
          array(
            'name' => 'zipcode',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display signatures from a specific zipcode.',
            'source' => array('param' => 'zipcode'),
          ),
          array(
            'name' => 'country',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display signatures from a specific country.',
            'source' => array('param' => 'country'),
          ),
          array(
            'name' => 'created_before',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display items created before specified time. Accepts Unix timestamp.',
            'source' => array('param' => 'createdBefore'),
          ),
          array(
            'name' => 'created_after',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display items created after specified time. Accepts Unix timestamp.',
            'source' => array('param' => 'createdAfter'),
          ),
          array(
            'name' => 'created_at',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results based on exact creation time. Accepts Unix timestamp.',
            'source' => array('param' => 'createdAt'),
          ),
          array(
            'name' => 'limit',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'The maximum number of results that may be returned. E.g., to return results 10-20, an offset of 10 and limit of 10 would be passed.',
            'default value' => 1000,
            'source' => array('param' => 'limit'),
          ),
          array(
            'name' => 'offset',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Offset the returned results by this number. E.g., to return results 10-20, an offset of 10 and limit of 10 would be passed.',
            'default value' => 0,
            'source' => array('param' => 'offset'),
          ),
          array(
            'name' => 'mock',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'When set to 1, this will cause the service to return a mock response.',
            'default value' => 0,
            'source' => array('param' => 'mock'),
          ),
        ),
        'access callback' => 'services_access_menu',
        'documentation callback' => '_api_petitions_load_signatures_doc',
        'documentation versions' => array(1000),
      ),
    ),
  );

  return $resources;
}

/**
 * Callback for Services petitions retrieve method.
 */
function _api_petitions_resource_retrieve($petition_id, $mock) {
  global $base_url;

  $website_url = variable_get('petitions_data_petitions_website_url', $base_url);

  // Return mock response.
  if ($mock) {
    $response = json_decode(_api_petitions_mock_response('retrieve'));
    return $response;
  }

  $resource = PetitionsRetrieveRawFactory::create();
  $resource->setBaseURL($website_url);
  $response = $resource->load($petition_id);

  return $response;
}

/**
 * Callback for Services petitions index method.
 */
function _api_petitions_resource_index($created_before, $created_after, $created_at, $limit, $offset, $title, $body, $issue_id, $issue, $signature_threshold_ceiling, $signature_threshold, $signature_threshold_floor, $signature_count_ceiling, $signature_count, $signature_count_floor, $signatures_needed_ceiling, $signatures_needed, $signatures_needed_floor, $url, $deadline_before, $deadline, $deadline_after, $status, $response_id, $response_association_time_before, $response_association_time, $response_association_time_after, $mock) {
  global $base_url;

  $website_url = variable_get('petitions_data_petitions_website_url', $base_url);

  // Return mock response.
  if ($mock) {
    $response = json_decode(_api_petitions_mock_response('index'));
    return $response;
  }

  $resource = PetitionsIndexRawFactory::create();

  // Scaffolding is in place for inactive parameters but logic is required.
  $resource->setBaseURL($website_url)
   ->setStartDate($created_after)
   ->setEndDate($created_before)
   ->setCreatedAt($created_at)
   ->setLimit($limit)
   ->setOffset($offset)
   ->setTitle($title)
   ->setBody($body)
   ->setIssueID($issue_id)
   //->setIssue($issue)
   ->setSignatureThresholdCeiling($signature_threshold_ceiling)
   ->setSignatureThreshold($signature_threshold)
   ->setSignatureThresholdFloor($signature_threshold_floor)
   ->setSignatureCountCeiling($signature_count_ceiling)
   ->setSignatureCount($signature_count)
   ->setSignatureCountFloor($signature_count_floor)
   //->setSignaturesNeededCeiling($signatures_needed_ceiling)
   //->setSignaturesNeeded($signatures_needed)
   //->setSignaturesNeededFloor($signatures_needed_floor)
   ->setURL($url)
   //->setDeadlineBefore($deadline_before)
   //->setDeadline($deadline)
   //->setDeadlineAfter($deadline_after)
   ->setStatus($status)
   ->setResponseID($response_id);
   //->setResponseAssociationTimeBefore($response_association_time_before)
   //->setResponseAssociationTime($response_association_time)
   //->setResponseAssociationTimeAfter($response_association_time_after);

  $response = $resource->load();

  return $response;
}

/**
 * Callback for Services petitions signatures relationship method.
 */
function _api_petitions_load_signatures($petition_id, $city, $state, $zipcode, $country, $created_before, $created_after, $created_at, $limit, $offset, $mock) {
  // Return mock response.
  if ($mock) {
    $response = json_decode(_api_petitions_mock_response('load_signatures'));
    return $response;
  }

  $resource = SignaturesRawFactory::create();
  $resource->setZipCode($zipcode)
    ->setCountry($country)
    ->setStartDate($created_after)
    ->setEndDate($created_before)
    ->setCreatedAt($created_at)
    ->setLimit($limit)
    ->setOffset($offset);

  $response = $resource->load($petition_id);

  return $response;
}

/**
 * Documentation callback for retrieve method of petitions resource.
 */
function _api_petitions_retrieve_doc() {
  $element = array(
    '#name' => t('Retrieve'),
    '#description' => t('Returns a petition matching the petition id.'),
    '#request' => '/v1/petitions/50cb6d2ba9a0b1c52e000017.json',
    '#response' => _api_petitions_mock_response('retrieve'),
    '#example_implementations_bundles' => _api_petitions_retrieve_doc_example_implementations_bundles(),
  );

  return $element;
}

/**
 * Documentation callback for bundled examples implementing retrieve method.
 */
function _api_petitions_retrieve_doc_example_implementations_bundles() {
  $example_implementations_bundles = array(
    'javascript' => array(
      '#language' => t('JavaScript'),
      '#examples' => _api_petitions_retrieve_doc_example_implementations(),
    ),
  );

  return $example_implementations_bundles;
}

/**
 * Documentation callback for examples implementing retrieve method.
 */
function _api_petitions_retrieve_doc_example_implementations() {
  $example_implementations = array(
    'thermometer' => array(
      '#name' => t('Thermometer'),
      '#description' => t('Display the status of a petition as a thermometer.'),
      //'#location' => _api_petitions_example_implementation('retrieve', 'javascript', 'thermometer'),
      '#download_link' => drupal_get_path('module', 'api_petitions') . '/example_implementations/javascript/thermometer.zip',
      '#uses_sdk' => FALSE,
    ),
  );

  return $example_implementations;
}

/**
 * Documentation callback for index method.
 */
function _api_petitions_index_doc() {
  $element = array(
    '#name' => t('Index'),
    '#description' => t('Returns a list of petitions matching passed parameters.'),
    '#request' => '/v1/petitions.json?limit=3&offset=0',
    '#response' => _api_petitions_mock_response('index'),
  );

  return $element;
}

/**
 * Documentation callback for relationship method.
 */
function _api_petitions_load_signatures_doc() {
  $element = array(
    '#name' => t('Signatures List'),
    '#description' => t('Display signatures attached to a petition.'),
    '#request' => '/v1/petitions/50cb6d2ba9a0b1c52e000017/signatures.json?limit=16&offset=0',
    '#response' => _api_petitions_mock_response('load_signatures'),
  );

  return $element;
}

/**
 * Returns a mock response for petitions methods.
 */
function _api_petitions_mock_response($method) {
  switch ($method) {
    case 'index':
      $file = 'api_petitions_index.response.json';
      break;

    case 'retrieve':
      $file = 'api_petitions_retrieve.response.json';
      break;

    case 'load_signatures':
      $file = 'api_petitions_load_signatures.response.json';
      break;

  }
  $response = file_get_contents(__DIR__ . '/example_responses/' . $file);
  return $response;
}

/**
 * Returns an example implementation's code for petitions methods.
 */
function _api_petitions_example_implementation($method, $language, $example) {
  $directory = __DIR__ . '/example_implementations/' . $language . '/' . $example;
  return $directory;
}
