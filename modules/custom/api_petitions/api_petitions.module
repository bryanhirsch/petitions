<?php

/**
 * @file
 * Provides user for Services according to Whitehouse API Standards
 */

/**
 * Implements hook_services_resources().
 */
function api_petitions_services_resources() {
  $resources = array();

  $resources['petitions'] = array(
    'operations' => array(
      'retrieve' => array(
        'callback' => '_api_petitions_resource_retrieve',
        'args' => array(
          array(
            'name' => 'petition_id',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'string',
            'description' => 'The petition id of the petition to get',
          ),
          array(
            'name' => 'mock',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'When set to 1, this will cause the service to return a mock response.',
            'default value' => 0,
            'source' => array('param' => 'mock'),
          ),
        ),
        'access callback' => 'services_access_menu',
        'documentation callback' => '_api_petitions_retrieve_doc',
        'documentation versions' => array(1000),
      ),
      'index' => array(
        'callback' => '_api_petitions_resource_index',
        'args' => array(
          array(
            'name' => 'created_before',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display items created before specified time. Accepts Unix timestamp.',
            'source' => array('param' => 'createdBefore'),
          ),
          array(
            'name' => 'created_after',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display items created after specified time. Accepts Unix timestamp.',
            'source' => array('param' => 'createdAfter'),
          ),
          array(
            'name' => 'created_at',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results based on exact creation time. Accepts Unix timestamp.',
            'source' => array('param' => 'createdAt'),
          ),
          array(
            'name' => 'limit',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'The maximum number of results that may be returned. E.g., to return results 10-20, an offset of 10 and limit of 10 would be passed.',
            'default value' => 10,
            'source' => array('param' => 'limit'),
          ),
          array(
            'name' => 'offset',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Offset the returned results by this number. E.g., to return results 10-20, an offset of 10 and limit of 10 would be passed.',
            'default value' => 0,
            'source' => array('param' => 'offset'),
          ),
          array(
            'name' => 'mock',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'When set to 1, this will cause the service to return a mock response.',
            'default value' => 0,
            'source' => array('param' => 'mock'),
          ),
        ),
        'access callback' => 'services_access_menu',
        'documentation callback' => '_api_petitions_index_doc',
        'documentation versions' => array(1000),
      ),
    ),
    'relationships' => array(
      'signatures' => array(
        'help' => t('This method returns signatures associated with a petition.'),
        'callback' => '_api_petitions_load_signatures',
        'args' => array(
          array(
            'name' => 'petition_id',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'array',
            'description' => 'The petition id of the petition whose signatures we are getting',
          ),
          array(
            'name' => 'city',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display signatures from a specific city.',
            'source' => array('param' => 'city'),
          ),
          array(
            'name' => 'state',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display signatures from a specific state.',
            'source' => array('param' => 'state'),
          ),
          array(
            'name' => 'zipcode',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display signatures from a specific zipcode.',
            'source' => array('param' => 'zipcode'),
          ),
          array(
            'name' => 'country',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display signatures from a specific country.',
            'source' => array('param' => 'country'),
          ),
          array(
            'name' => 'created_before',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display items created before specified time. Accepts Unix timestamp.',
            'source' => array('param' => 'createdBefore'),
          ),
          array(
            'name' => 'created_after',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results to display items created after specified time. Accepts Unix timestamp.',
            'source' => array('param' => 'createdAfter'),
          ),
          array(
            'name' => 'created_at',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Filters results based on exact creation time. Accepts Unix timestamp.',
            'source' => array('param' => 'createdAt'),
          ),
          array(
            'name' => 'limit',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'The maximum number of results that may be returned. E.g., to return results 10-20, an offset of 10 and limit of 10 would be passed.',
            'default value' => 10,
            'source' => array('param' => 'limit'),
          ),
          array(
            'name' => 'offset',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Offset the returned results by this number. E.g., to return results 10-20, an offset of 10 and limit of 10 would be passed.',
            'default value' => 0,
            'source' => array('param' => 'offset'),
          ),
          array(
            'name' => 'mock',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'When set to 1, this will cause the service to return a mock response.',
            'default value' => 0,
            'source' => array('param' => 'mock'),
          ),
        ),
        'access callback' => 'services_access_menu',
        'documentation callback' => '_api_petitions_load_signatures_doc',
        'documentation versions' => array(1000),
      ),
    ),
  );

  return $resources;
}

/**
 * Callback for Services petitions retrieve method.
 */
function _api_petitions_resource_retrieve($petition_id, $mock) {
  // Return mock response.
  if ($mock) {
    $response = json_decode(_api_petitions_mock_response('retrieve'));
    return $response;
  }

  // No real results yet. Logic to return real results should go here.
  $response = "Stub content. Submit with 'mock=1' to produce mock results.";

  return $response;
}

/**
 * Callback for Services petitions index method.
 */
function _api_petitions_resource_index($created_before, $created_after, $created_at, $limit, $offset, $mock) {
  // Return mock response.
  if ($mock) {
    $response = json_decode(_api_petitions_mock_response('index'));
    return $response;
  }

  // No real results yet. Logic to return real results should go here.
  $response = "Stub content. Submit with 'mock=1' to produce mock results.";

  return $response;
}

/**
 * Callback for Services petitions signatures relationship method.
 */
function _api_petitions_load_signatures($petition_id, $city, $state, $zipcode, $country, $created_before, $created_after, $created_at, $limit, $offset, $mock) {
  // Return mock response.
  if ($mock) {
    $response = json_decode(_api_petitions_mock_response('load_signatures'));
    return $response;
  }

  // No real results yet. Logic to return real results should go here.
  $response = "Stub content. Submit with 'mock=1' to produce mock results.";

  return $response;
}

/**
 * Documentation callback for retrieve method of petitions resource.
 */
function _api_petitions_retrieve_doc() {
  $element = array(
    '#name' => t('Retrieve'),
    '#description' => t('Returns a petition matching the petition id.'),
    '#request' => '/api/v1/petitions/petition_id.json',
    '#response' => _api_petitions_mock_response('retrieve'),
    //'#example_implementations_bundles' => _api_petitions_retrieve_doc_example_implementations_bundles(),
  );

  return $element;
}

/**
 * Documentation callback for bundles of examples implementing retrieve method of petitions resource.
 */
function _api_petitions_retrieve_doc_example_implementations_bundles() {
  $example_implementations_bundles = array(
    'javascript' => array(
      '#language' => t('JavaScript'),
      '#examples' => _api_petitions_retrieve_doc_example_implementations(),
    ),
  );

  return $example_implementations_bundles;
}

/**
 * Documentation callback for examples implementing retrieve method of petitions resource.
 */
function _api_petitions_retrieve_doc_example_implementations() {
  $example_implementations = array(
    'thermometer' => array(
      '#name' => t('Thermometer'),
      '#description' => t('Display the status of a petition as a thermometer.'),
      '#code' => _api_petitions_example_implementation('retrieve', 'javascript', 'thermometer'),
      '#download_link' => drupal_get_path('module', 'api_petitions') . '/example_implementations/javascript/thermometer.zip',
      '#uses_sdk' => FALSE,
    ),
  );

  return $example_implementations;
}

/**
 * Documentation callback for index method of petitions resource.
 */
function _api_petitions_index_doc() {
  $element = array(
    '#name' => t('Index'),
    '#description' => t('Returns a list of petitions matching passed parameters.'),
    '#request' => '/api/v1/petitions.json?limit=100&offset=0',
    '#response' => _api_petitions_mock_response('index'),
  );

  return $element;
}

/**
 * Documentation callback for relationship method of petitions resource.
 */
function _api_petitions_load_signatures_doc() {
  $element = array(
      '#name' => t('Signatures List'),
      '#description' => t('Display signatures attached to a petition.'),
      '#request' => '/api/v1/petitions/petition_id/signatures.json?limit=100&offset=0',
      '#response' => _api_petitions_mock_response('load_signatures'),
      //'#example_implementations_bundles' => _api_petitions_load_signatures_doc_example_implementations_bundles(),
  );

  return $element;
}

/**
 * Documentation callback for bundles of examples implementing relationship method of petitions resource.
 */
function _api_petitions_load_signatures_doc_example_implementations_bundles() {
  $example_implementations_bundles = array(
    'javascript' => array(
      '#language' => t('JavaScript'),
      '#examples' => _api_petitions_load_signatures_doc_example_implementations(),
    ),
  );

  return $example_implementations_bundles;
}

/**
 * Documentation callback for bundles of examples implementing relationship method of petitions resource.
 */
function _api_petitions_load_signatures_doc_example_implementations() {
  $example_implementations = array(
    'signatures_list' => array(
      '#name' => t('Signatures List'),
      '#description' => t('Display a list of signatures associated with a petition.'),
      '#code' => _api_petitions_example_implementation('load_signatures', 'javascript', 'signatures_list'),
      '#download_link' => url(drupal_get_path('module', 'api_petitions')) . '/example_implementations/javascript/signatures_list.zip', array('absolute' => TRUE),
      '#uses_sdk' => FALSE,
    ),
  );

  return $example_implementations;
}

/**
 * Returns a mock response for petitions methods.
 */
function _api_petitions_mock_response($method) {
  switch ($method) {
    case 'index' :
      $file = 'api_petitions_index.response.json';
      break;
    case 'retrieve' :
      $file = 'api_petitions_retrieve.response.json';
      break;
    case 'load_signatures' :
      $file = 'api_petitions_load_signatures.response.json';
      break;
  }
  $response = file_get_contents(__DIR__ . '/example_responses/' . $file);
  return $response;
}

/**
 * Returns an example implementation's code for petitions methods.
 */
function _api_petitions_example_implementation($method, $language, $example) {
  $directory = __DIR__ . '/example_implementations/' . $language . '/' . $example;
  //$directory_contents = _api_petitions_directory_scan_recursively($directory);
  return 'stub';
}

/**
 * Recursively scan the directory of an example implementation.
 */
function _api_petitions_directory_scan_recursively($directory) {
  $directory_contents = array();
  $current_directory = scandir($directory);
  foreach ($current_directory as $key => $value) {
    if (!in_array($value, array(".", ".."))) {
      if (is_dir($current_directory . '/' . $value)) {
        $directory_contents[$value] = _api_petitions_directory_scan_recursively($current_directory . '/' . $value);
      }
      else {
        $directory_contents[] = $value;
      }
    }
  }
  return $directory_contents;
}
