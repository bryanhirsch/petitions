<?php

/**
 * @file
 * services_documentation.module
 *
 * Generates documentation pages for Services resources.
 */

/**
 * Implements hook_menu().
 */
function services_documentation_menu() {
  $base_path = variable_get('services_documentation_base_path', 'developers');
  $version_info = services_documentation_versions_info();

  // API versions overview.
  $versions = $version_info['versions'];
  $items['services-documentation/versions'] = array(
    'title' => 'Services Documentation: API Versions',
    'page callback' => 'services_documentation_versions_overview_page',
    'access arguments' => array('view services documentation'),
  );

  // Build menu items for each API version.
  foreach ($versions as $version) {
    $version_path = $base_path . '/' . $version;
    $items[$version_path] = array(
      'title' => 'Version ' . $version,
      'page callback' => 'services_documentation_version_page',
      'access arguments' => array('view services documentation'),
      'page arguments' => array("$version"),
    );
  }

  // Provide an administration page for configuring homepage content.
  $items['admin/config/services/documentation'] = array(
    'title' => 'Services Documentation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('services_documentation_configure'),
    'access arguments' => array('administer site configuration'),
    'file' => 'services_documentation.admin.inc',
    'description' => "Configure API documentation.",
  );

  return $items;
}

/**
 * Implements hook_element_info().
 */
function services_documentation_element_info() {
  $types['services_documentation_method'] = array(
    '#input' => FALSE,
    '#pre_render' => array('services_documentation_format_method'),
    '#theme' => array('services_documentation_method'),
  );
  return $types;
}

/**
 * Formats documented Services methods.
 */
function services_documentation_format_method($element) {

  // Create HTTP method key.
  foreach ($element['#method']['args'] as $key => $argument) {
    if (is_array($argument['source'])) {
      switch (key($argument['source'])) {
        case 'param':
          $element['#method']['args'][$key]['http_method'] = 'GET';
          break;

        case 'path':
          $element['#method']['args'][$key]['http_method'] = 'URL';
          break;
      }
    }
    else {
      $element['#method']['args'][$key]['http_method'] = 'POST';
    }
  }

  return $element;
}

/**
 * Implements hook_permission().
 */
function services_documentation_permission() {
  return array(
    'view services documentation' => array(
      'title' => t('view services documentation'),
      'description' => t('View services documentation.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function services_documentation_theme($existing, $type, $theme, $path) {
  $theme_path = drupal_get_path('module', 'services_documentation') . '/theme';

  return array(
    'services_documentation_versions_overview' => array(
      'path' => $theme_path,
      'template' => 'services-documentation-versions-overview',
      'variables' => array('versions' => NULL),
    ),
    'services_documentation_resource' => array(
      'path' => $theme_path,
      'template' => 'services-documentation-resource',
      'variables' => array(
        'name' => NULL,
        'description' => NULL,
        'limit' => NULL,
        'method_bundles' => NULL,
      ),
    ),
    'services_documentation_method_bundle' => array(
      'path' => $theme_path,
      'template' => 'services-documentation-method-bundle',
      'variables' => array(
        'name' => NULL,
        'methods' => NULL,
      ),
    ),
    'services_documentation_method' => array(
      'path' => $theme_path,
      'template' => 'services-documentation-method',
      'variables' => array(
        'name' => NULL,
        'description' => NULL,
        'parameters' => NULL,
        'request' => NULL,
        'response' => NULL,
        'example_implementations_bundles' => NULL,
        'method' => NULL,
      ),
    ),
    'services_documentation_method_example_implementations_bundles' => array(
      'path' => $theme_path,
      'template' => 'services-documentation-method-example-implementations-bundles',
      'variables' => array(
        'language' => NULL,
        'examples' => NULL,
      ),
    ),
    'services_documentation_method_example_implementations' => array(
      'path' => $theme_path,
      'template' => 'services-documentation-method-example-implementations',
      'variables' => array(
        'name' => NULL,
        'description' => NULL,
        'location' => NULL,
        'files' => NULL,
        'download_link' => NULL,
        'uses_sdk' => NULL,
      ),
    ),
    'services_documentation_method_example_implementations_files' => array(
      'path' => $theme_path,
      'template' => 'services-documentation-method-example-implementations-files',
      'variables' => array(
        'name' => NULL,
        'path' => NULL,
        'type' => NULL,
        'contents' => NULL,
        'children' => NULL,
      ),
    ),
  );
}

/**
 * Page callback for documentation homepage.
 */
function services_documentation_versions_overview_page() {
  $base_path = variable_get('services_documentation_base_path', 'developers');
  $version_info = services_documentation_versions_info();
  $versions = $version_info['versions'];

  $items = array();
  foreach ($versions as $version) {
    $items[$version] = l(t($version), $base_path . '/' . $version);
  }

  $output = array(
    '#items' => $items,
    '#theme' => 'item_list',
  );

  return theme('services_documentation_versions_overview', array('versions' => $output));
}

/**
 * Page callback for a given documentation version.
 */
function services_documentation_version_page($version) {
  $theme_path = drupal_get_path('module', 'services_documentation') . '/theme';
  drupal_add_css($theme_path . '/services_documentation.css');

  $resources = services_documentation_build_documentation($version);
  $table_of_contents = array();
  $output = array();

  $resources_information = module_invoke_all('services_documentation_resource_info');

  // Build render array for methods belonging to this API version.
  // Cycle through resources. E.g., users, taxonomy_term, etc.
  foreach ($resources as $resource_name => $resource) {
    // Cycle through operation bundles. E.g., targeted_actionsm, actions, etc.
    foreach ($resource as $method_bundle_type => $method_bundle) {
      // Cycle through each operation in bundle. E.g., create, retrieve, etc.
      foreach ($method_bundle as $method_name => $method) {
        // Call the documentation callback to generate the render element.
        $documentation_callback = $method['documentation callback'];
        $element = call_user_func_array($documentation_callback, array());

        // Specifying #type attaches #pre_render and #theme callbacks
        // via hook_element_info() implementation.
        $element['#type'] = 'services_documentation_method';
        $element['#method'] = $method;

        // Loop through the example implementation arrays and apply appropriate
        // #theme functions.
        if (!empty($element['#example_implementations_bundles'])) {
          $example_bundles = $element['#example_implementations_bundles'];

          // For this method, loop through each example bundle, keyed by
          // language. E.g., Javascript, PHP, etc.
          foreach ($example_bundles as $language => $example_bundle) {
            $element['#example_implementations_bundles'][$language]['#theme'] = 'services_documentation_method_example_implementations_bundles';

            // For this example bundle, loop through the implementations.
            // E.g., myExampleJavascriptApp.
            foreach ($example_bundle['#examples'] as $example_name => $example) {
              $element['#example_implementations_bundles'][$language]['#examples'][$example_name]['#theme'] = 'services_documentation_method_example_implementations';

              // For this implementation, scan the files and directories.
              if ($element['#example_implementations_bundles'][$language]['#examples'][$example_name]['#location']) {

                // Recursively scan directories.
                $directory = $element['#example_implementations_bundles'][$language]['#examples'][$example_name]['#location'];
                $directory_contents = services_documenation_example_implementation_scan_recursively($directory);
                $element['#example_implementations_bundles'][$language]['#examples'][$example_name]['#files'] = $directory_contents;
              }
            }
          }
        }

        // Add properties for this method.
        $output[$resource_name]['#method_bundles'][$method_bundle_type]['#methods'][$method_name] = $element;
      }
      // Add properties for this method bundle.
      $output[$resource_name]['#method_bundles'][$method_bundle_type]['#name'] = $method_bundle_type;
      $output[$resource_name]['#method_bundles'][$method_bundle_type]['#theme'] = 'services_documentation_method_bundle';
    }
    // Add properties to for this resource.
    $output[$resource_name]['#theme'] = 'services_documentation_resource';
    $output[$resource_name]['#name'] = $resource_name;

    if ($resources_information[$resource_name]) {
      if ($resources_information[$resource_name]['#description']) {
        $output[$resource_name]['#description'] = $resources_information[$resource_name]['#description'];
      }
      if ($resources_information[$resource_name]['#limit']) {
        $output[$resource_name]['#limit'] = $resources_information[$resource_name]['#limit'];
      }
    }

    // Add this resource to the table of contents.
    $table_of_contents['#items'][$resource_name] = l($resource_name, current_path(), array('fragment' => $resource_name));
  }

  // Add table of contents to output.
  asort($table_of_contents['#items']);
  $table_of_contents['#prefix'] = t('Resources');
  $table_of_contents['#theme'] = 'item_list';
  array_unshift($output, $table_of_contents);

  return $output;
}

/**
 * Generates an array of Services resources keyed by API version.
 */
function services_documentation_build_documentation($version = NULL) {
  $version_info = services_documentation_versions_info();
  $documentation_resources = array();

  // Build menu items for Services resource documentation.
  if ($resources = services_get_resources()) {
    // Cycle through resources. E.g., users, taxonomy_term, etc.
    foreach ($resources as $resource_name => $resource) {
      // Cycle through operation bundles. E.g., targeted_actionsm, actions, etc.
      foreach ($resource as $method_bundle_type => $method_bundle) {
        // Cycle through each operation in bundle. E.g., create, retrieve, etc.
        foreach ($method_bundle as $method_name => $method) {
          if (is_array($method) && !empty($method['documentation callback'])) {

            // Set default documentation version.
            if (empty($resource['documentation versions'])) {
              $resource['documentation versions'] = (array) $version_info['current_version'];
            }

            // Return resources for specified API version.
            if ($version && in_array($version, $resource['documentation versions'])) {
              $documentation_resources[$resource_name][$method_bundle_type][$method_name] = $method;
            }

            // Return resources for all API versions.
            else {
              foreach ($resource['documentation versions'] as $doc_version) {
                $documentation_resources[$doc_version][$resource_name][$method_bundle_type][$method_name] = $method;
              }
            }
          }
        }
      }
    }
  }

  return $documentation_resources;
}

/**
 * Returns version information about Services documentation.
 *
 * @return array
 *   API version information. 'default_version' is the version that's assumed
 *   if the module doesn't declare an API version. 'versions' is an array
 *   containing the known API versions. 'current_version' is the current
 *   version number.
 */
function services_documentation_versions_info() {
  $info = array(
    'default_version' => 1000,
    'versions' => array(1000),
  );
  $info['current_version'] = max($info['versions']);
  drupal_alter('services_documentation_versions', $info);

  return $info;
}

/**
 * Recursively scan the directory of an example implementation.
 */
function services_documenation_example_implementation_scan_recursively($directory) {
  $results = array();
  $current_directory = scandir($directory);

  // Remove "." and ".." from the array.
  if (in_array(".", $current_directory) && in_array("..", $current_directory)) {
    array_splice($current_directory, 0, 2);
  }

  // Contruct the array that will be returned for output.
  foreach ($current_directory as $key => $value) {
    if (!in_array($value, array(".", ".."))) {
      $path = $directory . '/' . $value;
      $results[$value] = array();
      $results[$value]['#name'] = $value;
      $results[$value]['#path'] = $path;
      // Recursively scan directories.
      if (is_dir($path)) {
        $results[$value]['#type'] = 'directory';
        $results[$value]['#children'] = services_documenation_example_implementation_scan_recursively($path);
      }
      // Otherwise output code.
      else {
        $results[$value]['#type'] = 'file';
        $results[$value]['#contents'] = file_get_contents($path);
      }
      $results[$value]['#theme'] = 'services_documentation_method_example_implementations_files';
    }
  }

  return $results;
}

/**
 * Save settings configured by site admin, during install process, or submitted
 * programtically.
 *
 * @param string $services_documentation_base_path
 *  This path will be declared in services_documentation's implementation of
 *  hook_menu. It will be used as the base versioned documentation pages.
 *
 * @param string $services_documentation_homepage
 *  Services Documentation provides a list of API versions linking to corresponding
 *  API documentation at the Drupal path: services-documentation/versions. Provide
 *  this as a default "home page" by pointing the base path to this page.
 *
 * @return boolean
 */
function services_documentation_save_settings($services_documentation_base_path = 'developers', $services_documentation_homepage = 'services-documentation/versions') {
  
  // Determine if anything has changed.
  $old_base_path = variable_get('services_documentation_base_path', '');
  $old_homepage_alias = variable_get('services_documentation_homepage', '');
  $is_same_base_path = ($services_documentation_homepage == $old_homepage_alias) ? TRUE : FALSE; 
  $is_same_homepage_alias = ($services_documentation_homepage == $old_homepage_alias) ? TRUE : FALSE;

  // Update stale or missing variables and path aliases.
  if (!$is_same_base_path || $is_same_homepage_alias) {

    // Delete the stale path alias.
    if ($path = path_load(array('alias' => $old_base_path))) {
      path_delete($path);
    }

    // Save new variables and path alias.
    variable_set('services_documentation_homepage', $services_documentation_homepage);
    variable_set('services_documentation_base_path', $services_documentation_base_path);
    $path = array(
      'source' => $services_documentation_homepage,
      'alias' => $services_documentation_base_path,
    );
    path_save($path);

    // Notify user.
    $text = t('Services Documentation\'s base path has been set to @base_path. This is like your documentation "home page". By default your home page points to Services Documentation\'s <a href="@versions">Versions</a> page. You can change this setting <a href="@config">here</a>', array(
      '@base_path' => $services_documentation_base_path,
      '@versions' => '/services-documentation/versions',
      '@config' => '/admin/config/services/documentation',
    ));
    drupal_set_message($text);
  }
}
